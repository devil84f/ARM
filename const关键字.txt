C语言 const 关键字完全指南
================================

一、const 基础
1. 作用：定义不可修改的常量，增强代码安全性和可读性。
2. 特性：
   - 必须初始化
   - 编译时类型检查
   - 作用域遵循块规则（不同于 #define）

二、const 与指针组合
1. 指向常量的指针（内容不可变）：
   const int *ptr;
   - 可修改指针指向
   - 不可通过指针修改内容

2. 常量指针（指针不可变）：
   int *const ptr = &x;
   - 必须初始化
   - 不可修改指针指向
   - 可通过指针修改内容

3. 指向常量的常量指针：
   const int *const ptr = &x;
   - 指针和内容均不可变

三、关键应用场景
1. 函数参数保护：
   void print(const char *str);
   - 防止函数内意外修改外部数据

2. 结构体成员保护：
   struct Student {
     const int id;  // 不可变成员
     int score;     // 可变成员
   };

3. 硬件寄存器映射：
   volatile int *const reg = (int*)0x1234;

四、重要规则
1. 类型转换：
   - 安全：非const → const（隐式）
   - 危险：const → 非const（需显式强制转换，可能导致未定义行为）

2. 字符串字面量：
   const char *s = "hello";  // 正确
   char *s = "hello";        // 警告（应避免）

五、与 #define 对比
| 特性        | const          | #define       |
|-------------|----------------|---------------|
| 类型检查    | 有             | 无            |
| 作用域      | 块作用域       | 文件作用域    |
| 调试        | 可见于符号表   | 不可见        |
| 内存占用    | 占用           | 不占用        |

六、常见错误
1. 尝试修改 const 变量：
   const int x = 5;
   x = 10;  // 编译错误

2. 错误指针操作：
   int *ptr = &x;  // 错误（x为const时）
   应使用：const int *ptr = &x;

3. 结构体初始化：
   struct S { const int id; };
   struct S s = { .id=1 };  // 必须初始化

七、高级注意事项
1. const 不是编译期常量（C语言中）：
   const int n = 10;
   int arr[n];  // C99前非法（C++合法）

2. 未定义行为：
   const int x = 5;
   int *p = (int*)&x;
   *p = 10;  // 未定义行为！

八、最佳实践
1. 函数参数：优先使用 const 保护指针/引用参数
2. 常量定义：替代 #define 提高类型安全性
3. 明确意图：通过 const 位置清晰表达设计约束
